# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.


name: Build & Upload Python Package

on:
  release:
    types: [published]
  push:
    branches-ignore:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write

env:
  UPDATE_SCRIPT: "psc_3d_package/version_info.py"
  VERSION_FILE: "psc_3d_package/psc_3d/version.py"
  README_TEMPLATE: "psc_3d_package/readme_template.md"
  README: "psc_3d_package/README.md"

jobs:
  deploy_package:
#    runs-on: [ self-hosted ]
    runs-on: [ ubuntu-latest ]
    environment: deployment
    steps:
#    - name: Set interrupt
#      uses: mxschmitt/action-tmate@v3
#      with:
#        limit-access-to-actor: false
    - name: Show current workflow info
      run: |
        echo "Event name:       ${{ github.event_name }}"
        echo "Branch reference: ${{ github.ref }}"
    - name: Install dependencies
      run: |
        mkdir -p $(pwd)/venv 
        python3 -m venv $(pwd)/venv
        source $(pwd)/venv/bin/activate
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools wheel 

    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Verify push not to master
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        echo "Push to master prohibited"
        exit 1

    - name: Forward patch version
      if: github.event_name == 'push' && github.ref != 'refs/heads/master'
      run: |
        VERSION=$(python3 ${{ env.UPDATE_SCRIPT }} ${{ env.VERSION_FILE }} ${{ env.README_TEMPLATE }} ${{ env.README }} patch forward 1)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "export VERSION=${VERSION}" >> run_info.sh
    - name: Forward minor version
      if: github.event_name == 'pull_request' && github.ref != 'refs/heads/master'
      run: |
        VERSION=$(python3 ${{ env.UPDATE_SCRIPT }}  ${{ env.VERSION_FILE }} ${{ env.README_TEMPLATE }} ${{ env.README }} minor forward 1)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "export VERSION=${VERSION}" >> run_info.sh
    - name: Forward major version
      if: github.event_name == 'pull_request' && github.ref == 'refs/heads/master'
      run: |
        VERSION=$(python3 ${{ env.UPDATE_SCRIPT }}  ${{ env.VERSION_FILE }} ${{ env.README_TEMPLATE }} ${{ env.README }} major forward 1)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "export VERSION=${VERSION}" >> run_info.sh
    - name: Commit version
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      run: |
        git config --global user.name ${{ secrets.GIT_USER }}
        git config --global user.email ${{ secrets.GIT_MAIL }}
        git config --global --list
        git status
        git add ${{ env.VERSION_FILE }} ${{ env.README }}
        git commit -m "Automated version ${{ env.VERSION }} commit"
    - name: Build package
      run: |
        cd psc_3d_package
        python3 -m pip install -r requirements.txt
        python3 setup.py bdist_wheel
        mv dist ../.
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
    - name: Git Push
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      run: |
        git push origin ${{ github.ref }}
    - name: Store run info
      uses: actions/upload-artifact@v3
      with:
        retention-days: 1
        name: run_info
        path: run_info.sh

  deploy_image:
    runs-on: ubuntu-latest
    needs: deploy_package
    environment: deployment
    steps:
    - name: Download run Info
      uses: actions/download-artifact@v3
      with:
        name: run_info

    - name: Log in to Docker Hub
      run: |
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
    - name: Load run info
      run: |
        cat run_info.sh
        source run_info.sh
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
    - name: Check out the code
      uses: actions/checkout@v2
    - name: Build Docker image
      run: |
        cd psc_3d_image
        docker build -t psc_3d .
    - name: Set version tag
      run: |
        docker tag psc_3d  ${{ secrets.DOCKERHUB_USERNAME }}/psc_3d:${{ env. VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/psc_3d:${{ env. VERSION }}
    - name: Set up latest tag
      if: github.ref == 'refs/heads/master'
      run: |
        docker tag psc_3d  ${{ secrets.DOCKERHUB_USERNAME }}/psc_3d:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/psc_3d:latest
